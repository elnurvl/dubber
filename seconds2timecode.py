import argparse
from os import path
import pandas
from decimal import Decimal

parser = argparse.ArgumentParser(description='Converts seconds into timecodes in a label file generated by Audacity.')

# Required positional argument
parser.add_argument('labels',
                    help='Path of the label file generated by Audacity')

# Optional positional argument
parser.add_argument('--framerate', nargs='?',
                    help="Framerate of the project in which the generated markers will be used (default: %(default)s)",
                    type=int,
                    default=30)

# Optional positional argument
parser.add_argument('--output', nargs='?',
                    help="Path for the generated markers file (default: ./<input_file>.csv)", default="./{}.csv")

args = parser.parse_args()

labels = args.labels
framerate = args.framerate


args = parser.parse_args()
output = args.output.format(path.splitext(path.basename(labels))[0])

colnames = ['timecode_in', 'timecode_out', 'description']
data = pandas.read_csv(labels, names=colnames, sep="\t")

timecode_in = data.timecode_in.tolist()
timecode_out = data.timecode_out.tolist()

def toTimecode(seconds, framerate):
    ms = round((Decimal(seconds) % 1) * 1000)
    frame = ms // (1000 / framerate)
    m, s = divmod(int(seconds), 60)
    h, m = divmod(m, 60)
    return f'{h:d}:{m:02d}:{s:02d}:{int(frame):02d}'

if len(timecode_in) != len(timecode_out):
    raise ValueError('Invalid label file')

timecode_in_formatted = [None]*len(timecode_in)
timecode_out_formatted = [None]*len(timecode_out)

for i in range(len(timecode_in)):
    if isinstance(timecode_in[i], float):
        timecode_in_formatted[i] = toTimecode(timecode_in[i], framerate)
    if isinstance(timecode_in[i], float):
        timecode_out_formatted[i] = toTimecode(timecode_out[i], framerate)

data = data.replace(timecode_in, timecode_in_formatted)
data = data.replace(timecode_out, timecode_out_formatted)
data.to_csv(output, header=False, index=False)